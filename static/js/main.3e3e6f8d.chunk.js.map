{"version":3,"sources":["Graph/Graph.tsx","Bars/StatBar.tsx","Graph/GraphGenerator.tsx","Bars/InputBar.tsx","App.tsx","index.tsx"],"names":["Graph","vertex","this","props","initialVertexColors","ele","i","color","edge","initialEdgeColors","j","adjListTable","adjList","map","ends","columns","end","endInd","style","colorOfEdge","colorOfVertex","vertices","n","push","className","background","edges","slice","k","from","to","borderColor","borderWidth","ghostEdges","r","renderDiagram","React","Component","StatBar","L","C","GraphGenerator","state","delay","gen","calcL","calcC","vertexColors","edgeColors","stats","stage","a","Array","setState","oldEnd","newEnd","Math","random","p","excludedEnd","concat","sort","b","floor","length","indexToRemove","indexOf","splice","Promise","setTimeout","start","queue","visited","fill","parent","cur","shift","neighbor","path","valid","totalL","bfs","roundedL","round","totalC","neighbors","totalPossibleEdges","totalEdges","roundedC","calculateL","calculateC","includes","generate","calculate","InputBar","input","String","initialInput","event","persist","prevState","target","name","value","onSubmit","parseInt","parseFloat","update","bind","type","onChange","handleInputChange","App","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e3e6f8d.chunk.js","sourcesContent":["import React from 'react';\nimport LineTo from 'react-lineto';\nimport RadialRender from 'react-radial-render';\nimport './Graph.css';\n\ntype GraphProps = {\n    n: number,\n    k: number,\n    adjList: Array<Array<number>>,\n    initialVertexColors: Array<{i: number, color: string}>,\n    initialEdgeColors: Array<{edge: {i: number, j: number}, color: string}>\n    ghostEdges: Array<{edge: {i: number, j: number}, color: string}>,\n}\n\n// type GraphState = {\n//     vertexColors: Array<{i: number, color: string}>,\n//     edgeColors: Array<{edge: {i: number, j: number}, color: string}>,\n// }\n\nclass Graph extends React.Component<GraphProps> {\n    // state = {\n    //     vertexColors: this.props.initialVertexColors,\n    //     edgeColors: this.props.initialEdgeColors,\n    // };\n\n    colorOfVertex(vertex: number): string {\n        for (let ele of this.props.initialVertexColors) {\n            if (ele.i === vertex) {\n                return ele.color;\n            }\n        }\n        return 'black';\n    }\n\n    colorOfEdge(edge: {i: number, j: number}): string {\n        for (let ele of this.props.initialEdgeColors) {\n            if ((ele.edge.i === edge.i && ele.edge.j === edge.j) ||\n                (ele.edge.j === edge.i && ele.edge.i === edge.j)) {\n                return ele.color;\n            }\n        }\n        return 'black';\n    }\n\n    renderAdjListTable() {\n        const adjListTable = this.props.adjList.map((ends: Array<number>, vertex: number) => {\n            const columns = ends.map((end: number, endInd: number) => {\n                return (\n                    <td key={'' + vertex + '-' + endInd} style={{color: this.colorOfEdge({i: vertex, j: end})}}>{end}</td>\n                )\n            });\n            return (\n                <tr key={'' + vertex}>\n                    <th key={'' + vertex + '-label'} style={{color: this.colorOfVertex(vertex)}}>{vertex}</th>\n                    {columns}\n                </tr>\n            )\n        });\n\n        return (\n            <table>\n                <tbody>\n                    {adjListTable}\n                </tbody>\n            </table>\n        );\n    }\n\n    renderDiagram() {\n        let vertices = [];\n        for (let i: number = 0; i < this.props.n; i++) {\n            vertices.push(<button className={'vertex vertex-' + i} style={{background: this.colorOfVertex(i)}} />);\n        }\n        let edges = [];\n        for (let i: number = 0; i < this.props.n; i++) {\n            for (let j of this.props.adjList[i].slice(0, this.props.k / 2)) {\n                edges.push(<LineTo className={'edge'}\n                                   key={'edge-' + i + ',' + j}\n                                   from={'vertex-' + i}\n                                   to={'vertex-' + j}\n                                   borderColor={this.colorOfEdge({i: i, j: j})}\n                                   borderWidth={3}\n                />);\n            }\n        }\n        for (let ele of this.props.ghostEdges) {\n            edges.push(<LineTo className={'edge'}\n                               key={'edge-' + ele.edge.i + ',' + ele.edge.j}\n                               from={'vertex-' + ele.edge.i}\n                               to={'vertex-' + ele.edge.j}\n                               borderColor={ele.color}\n                               borderWidth={3}\n            />);\n        }\n\n        return (\n            <div className=\"graph\">\n                <div className=\"vertices\">\n                    <RadialRender r={256}>\n                        {vertices}\n                    </RadialRender>\n                </div>\n                <div className=\"edges\">\n                    {edges}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"diagram\">\n                    {this.renderDiagram()}\n                </div>\n                {/*<div className=\"adj-table\">*/}\n                {/*    {this.renderAdjListTable()}*/}\n                {/*</div>*/}\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React from 'react';\n\ntype StatBarProps = {\n    L: number,\n    C: number,\n}\n\nclass StatBar extends React.Component<StatBarProps> {\n    render() {\n        return (\n            <div className=\"stat-bar\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>Length (L)</th>\n                            <th>Clustering (C)</th>\n\n                        </tr>\n                        <tr>\n                            <td>{this.props.L !== -1 ? this.props.L : 'Calculating'}</td>\n                            <td>{this.props.C !== -1 ? this.props.C : 'Calculating'}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default StatBar;","import React from 'react';\nimport Graph from './Graph';\nimport StatBar from '../Bars/StatBar'\n\ntype GraphGeneratorProps = {\n    n: number,\n    k: number,\n    p: number,\n    delay: number,\n}\n\ntype GraphGeneratorState = {\n    delay: {gen: number, calcL: number, calcC: number},\n    adjList: Array<Array<number>>,\n    vertexColors: Array<{i: number, color: string}>,\n    edgeColors: Array<{edge: {i: number, j: number}, color: string}>,\n    ghostEdges: Array<{edge: {i: number, j: number}, color: string}>,\n    stats: {L: number, C: number},\n    stage: string,\n}\n\nclass GraphGenerator extends React.Component<GraphGeneratorProps, GraphGeneratorState> {\n    constructor(props: GraphGeneratorProps) {\n        super(props);\n        \n        this.state = {\n            delay: {gen: this.props.delay, calcL: this.props.delay, calcC: this.props.delay},\n            adjList: [],\n            vertexColors: [],\n            edgeColors: [],\n            ghostEdges: [],\n            stats: {L: -1, C: -1},\n            stage: '',\n        };\n\n        // this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async generate() {\n        let adjList: GraphGeneratorState[\"adjList\"] = [];\n        for (let i: number = 0; i < this.props.n; i++) {\n            adjList.push(Array(this.props.k));\n            for (let j: number = 0; j < this.props.k / 2; j++) {\n                adjList[i][j] = (i + j + 1) % this.props.n;\n            }\n            for (let j: number = 0; j < this.props.k / 2; j++) {\n                adjList[i][j + this.props.k / 2] = (i - j - 1 + this.props.n) % this.props.n;\n            }\n        }\n\n        this.setState({adjList: adjList, stage: 'Generating'});\n\n        for (let j: number = 0; j < this.props.k / 2; j++) {\n            for (let i: number = 0; i < this.props.n; i++) {\n                let oldEnd: number = adjList[i][j];\n                let newEnd: number = oldEnd;\n\n                if (Math.random() < this.props.p) {\n                    let excludedEnd: Array<number> = [i].concat(adjList[i]).sort(function(a, b){return a - b});\n                    newEnd = Math.floor(Math.random() * (this.props.n - excludedEnd.length));\n                    for (let ele of excludedEnd) {\n                        if (newEnd >= ele) {\n                            newEnd++;\n                        }\n                    }\n\n                    let indexToRemove: number = adjList[oldEnd].indexOf(i);\n                    adjList[oldEnd].splice(indexToRemove, 1);\n                    adjList[i][j] = newEnd;\n                    adjList[newEnd].push(i);\n                }\n\n                if (this.state.delay.gen !== 0) {\n                    let vertexColors: GraphGeneratorState[\"vertexColors\"] = [\n                        {i: i, color: \"green\"},\n                        {i: oldEnd, color: \"red\"},\n                    ];\n                    if (oldEnd === newEnd) {\n                        vertexColors[1].color = 'green';\n                    }\n                    else {\n                        vertexColors.push({i: newEnd, color: 'green'});\n                    }\n                    let edgeColors: GraphGeneratorState[\"edgeColors\"] = [\n                        {edge: {i: i, j: newEnd}, color: 'green'},\n                    ];\n                    let ghostEdges: GraphGeneratorState[\"ghostEdges\"]  = [];\n                    if (oldEnd !== newEnd) {\n                        ghostEdges.push({edge: {i: i, j: oldEnd}, color: 'red'});\n                    }\n\n                    this.setState({adjList: adjList, vertexColors: vertexColors, edgeColors: edgeColors, ghostEdges: ghostEdges});\n                    await new Promise(r => setTimeout(r, this.state.delay.gen * 1000));\n                }\n            }\n        }\n\n        this.setState({adjList: adjList, vertexColors: [], edgeColors: [], ghostEdges: []});\n    }\n\n    bfs(start: number, end: number): Array<number> {\n        let queue: Array<number> = [start];\n        let visited: Array<boolean> = Array(this.props.n).fill(false);\n        visited[start] = true;\n        let parent: Array<number> = Array(this.props.n).fill(-1);\n        parent[start] = -1;\n\n        while (queue.length > 0) {\n            let cur: any = queue.shift();\n            if (cur === end) {\n                break;\n            }\n\n            for (const neighbor of this.state.adjList[cur]) {\n                if (!visited[neighbor]) {\n                    queue.push(neighbor);\n                    visited[neighbor] = true;\n                    parent[neighbor] = cur;\n                }\n            }\n        }\n\n        let path: Array<number> = [];\n\n        let cur: number = end;\n        while (parent[cur] !== -1) {\n            path.push(cur);\n            cur = parent[cur];\n        }\n        path.push(cur);\n\n        return path;\n    }\n\n    async calculateL() {\n        this.setState({stage: 'Calculating L'});\n\n        let valid: number = 0;\n        let totalL = 0;\n\n        for (let i: number = 0; i < this.props.n - 1; i++) {\n            for (let j: number = i + 1; j < this.props.n; j++) {\n                let path: Array<number> = this.bfs(i, j);\n                if (path.length !== 1) {\n                    valid++;\n                    totalL += path.length - 1;\n                }\n\n                if (this.state.delay.calcL !== 0)\n                {\n                    let vertexColors: GraphGeneratorState[\"vertexColors\"] = [\n                        {i: path[0], color: \"green\"},\n                    ];\n                    let edgeColors: GraphGeneratorState[\"edgeColors\"] = [];\n                    for (let k: number = 1; k < path.length; k++)\n                    {\n                        vertexColors.push({i: path[k], color: 'green'});\n                        edgeColors.push({edge: {i: path[k - 1], j: path[k]}, color: 'green'});\n                    }\n\n                    this.setState({vertexColors: vertexColors, edgeColors: edgeColors});\n                    await new Promise(r => setTimeout(r, this.state.delay.calcL * 1000));\n                }\n            }\n        }\n\n        let roundedL: number = Math.round(totalL / valid * 100) / 100;\n        this.setState({stats: {L: roundedL, C: this.state.stats.C}, vertexColors: [], edgeColors: []});\n    }\n\n    async calculateC() {\n        this.setState({stage: 'Calculating C'});\n\n        let valid: number = 0;\n        let totalC: number = 0;\n\n        for (let i: number = 0; i < this.props.n; i++) {\n            let neighbors: number = this.state.adjList[i].length;\n            let totalPossibleEdges: number = neighbors * (neighbors - 1) / 2;\n            if (totalPossibleEdges !== 0) {\n                let totalEdges: number = 0\n                for (let j: number = 0; j < neighbors - 1; j++) {\n                    for (let k: number = j + 1; k < neighbors; k++) {\n                        if (this.state.adjList[j].indexOf(k) !== -1) {\n                            totalEdges++;\n                        }\n                    }\n                }\n\n                valid++;\n                totalC += totalEdges / totalPossibleEdges;\n            }\n        }\n\n        let roundedC: number = Math.round(totalC / valid * 100) / 100;\n        this.setState({stats: {L: this.state.stats.L, C: roundedC}, vertexColors: [], edgeColors: []});\n    }\n\n    async calculate() {\n        await this.calculateL();\n        await this.calculateC();\n    }\n\n    // async handleSubmit(event: any) {\n    //     this.setState({params: this.state.input, stage: ''});\n    //\n    //     await this.generate();\n    // }\n    //\n    // renderInputBar() {\n    //     return (\n    //         <form onSubmit={this.handleSubmit}>\n    //             <label>\n    //                 n:\n    //                 <input type=\"text\"\n    //                        value={this.state.input.n}\n    //                        onChange={(event: React.ChangeEvent<HTMLInputElement>): void =>\n    //                            this.setState({input: {n: parseInt(event.target.value), k: this.state.input.k, p: this.state.input.p, delay: this.state.input.delay}})\n    //                        }\n    //                 />\n    //             </label>\n    //         </form>\n    //     );\n    // }\n\n    render() {\n        return (\n            <div className=\"graph-generator\">\n                {(this.state.stage.includes('Calculating')) &&\n                <StatBar L={this.state.stats.L}\n                         C={this.state.stats.C}\n                />}\n                {(this.state.stage !== '') &&\n                <Graph key={'graph' + this.props.n}\n                       n={this.props.n}\n                       k={this.props.k}\n                       adjList={this.state.adjList}\n                       initialVertexColors={this.state.vertexColors}\n                       initialEdgeColors={this.state.edgeColors}\n                       ghostEdges={this.state.ghostEdges}\n                />}\n            </div>\n        );\n    }\n\n    async componentDidMount() {\n        await this.generate();\n        await this.calculate();\n    }\n}\n\nexport default GraphGenerator;","import React from \"react\";\n\ntype InputBarProps = {\n    initialInput: {n: number, k: number, p: number, delay: number},\n    onSubmit: any,\n}\n\ntype InputBarState = {\n    input: {n: string, k: string, p: string, delay: string},\n}\n\nclass InputBar extends React.Component<InputBarProps, InputBarState> {\n    constructor(props: InputBarProps) {\n        super(props);\n\n        this.state = {\n            input: {\n                n: String(this.props.initialInput.n),\n                k: String(this.props.initialInput.k),\n                p: String(this.props.initialInput.p),\n                delay: String(this.props.initialInput.delay),\n            }\n        }\n    }\n\n    handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n        event.persist();\n        this.setState(prevState => ({\n            input: {\n                ...prevState.input,\n                [event.target.name]: event.target.value,\n            }\n        }));\n\n    }\n\n    update() {\n        this.props.onSubmit({\n            n: parseInt(this.state.input.n),\n            k: parseInt(this.state.input.k),\n            p: parseFloat(this.state.input.p),\n            delay: parseFloat(this.state.input.delay)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.update.bind(this)}>\n                    <label>\n                        n:\n                        <input type=\"text\"\n                               name=\"n\"\n                               value={this.state.input.n}\n                               onChange={this.handleInputChange.bind(this)}\n                        />\n                    </label>\n                    <label>\n                        k:\n                        <input type=\"text\"\n                               name=\"k\"\n                               value={this.state.input.k}\n                               onChange={this.handleInputChange.bind(this)}\n                        />\n                    </label>\n                    <label>\n                        p:\n                        <input type=\"text\"\n                               name=\"p\"\n                               value={this.state.input.p}\n                               onChange={this.handleInputChange.bind(this)}\n                        />\n                    </label>\n                    <label>\n                        delay:\n                        <input type=\"text\"\n                               name=\"delay\"\n                               value={this.state.input.delay}\n                               onChange={this.handleInputChange.bind(this)}\n                        />\n                    </label>\n                    <label>\n                        <input type=\"submit\"\n                               name=\"generate\"\n                               value=\"Generate\"\n                               onChange={this.handleInputChange.bind(this)}\n                        />\n                    </label>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default InputBar","import React from 'react';\nimport GraphGenerator from './Graph/GraphGenerator';\nimport InputBar from \"./Bars/InputBar\";\n\ntype AppState = {\n    key: number,\n    input: {n: number, k: number, p: number, delay: number},\n}\n\nclass App extends React.Component<any, AppState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            key: 1,\n            input: {n: 16, k: 4, p: 0.5, delay: 0.1},\n        }\n    }\n\n    onSubmit(input: any) {\n        this.setState({key: this.state.key + 1, input: input})\n    }\n\n    render() {\n        return (\n            <div key={'app-' + this.state.key}>\n                <InputBar initialInput={this.state.input}\n                          onSubmit={this.onSubmit.bind(this)}\n                />\n                <GraphGenerator n={this.state.input.n}\n                                k={this.state.input.k}\n                                p={this.state.input.p}\n                                delay={this.state.input.delay}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}